version: 2.1
executors:
  build:
    docker:
      - image: eu.gcr.io/channels-001/base-ci:node-20
        auth:
          username: _json_key
          password: $GCLOUD_REGISTRY_CREDENTIALS
    resource_class: xlarge
  terraform:
    docker:
      - image: eu.gcr.io/channels-001/terraform:latest
        auth:
          username: _json_key
          password: $GCLOUD_REGISTRY_CREDENTIALS
    resource_class: small

fast-checkout: &fast-checkout
  attach_workspace:
    at: /root

commands:
  setup:
    description: 'Checkout the project'
    steps:
      - run:
          name: Checkout code
          command: |
            mkdir -p ~/.ssh/
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git clone --depth 1 "$CIRCLE_REPOSITORY_URL" --branch "$CIRCLE_BRANCH"
            mv -f ./[project-name]/{.,}* ./
            rm -rf ./[project-name]
      - persist_to_workspace:
          root: /root
          paths:
            - project

  configure:
    description: 'Setup remote docker with gcloud'
    parameters:
      environment:
        type: string
        default: 'staging'
      gcloud:
        type: string
        default: '$GCLOUD_SERVICE_CREDENTIALS'

    steps:
      - run:
          name: Configure environment
          command: |
            SANATISED_BRANCH_NAME_CI="$(echo ${CIRCLE_BRANCH:0:43} | sed 's/\//-/g' | sed 's/\./-/g' | sed 's/_/-/g')"
            echo 'export ENVIRONMENT=<< parameters.environment >>' >> $BASH_ENV
            echo 'export CIRCLE_PR_NUMBER="${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}"' >> $BASH_ENV
            echo "export SANATISED_BRANCH_NAME=${SANATISED_BRANCH_NAME_CI}" >> $BASH_ENV
            echo 'source env.$ENVIRONMENT' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Configure gcloud SDK
          command: |
            echo << parameters.gcloud >> > ~/gcloud-service-key.json
            echo 'export GOOGLE_APPLICATION_CREDENTIALS=~/gcloud-service-key.json' >> $BASH_ENV
            source $BASH_ENV
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud config set project $PROJECT_ID
            gcloud config set compute/region $CLOUDSDK_COMPUTE_REGION
            echo Y | gcloud auth configure-docker
      - run:
          name: Configure npm
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
      - run:
          name: Write .terraformrc file
          command: |
            cat >~/.terraformrc \<<EOL
            credentials "app.terraform.io" {
              token = "${TERRAFORM_CLOUD_TOKEN}"
            }
            EOL

  npm:
    description: 'Install NPM dependencies'
    steps:
      - restore_cache:
          name: Restore NPM Package Cache
          keys:
            - npm-all-packages-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci
      - save_cache:
          name: Save NPM Package Cache
          key: npm-all-packages-{{ checksum "package-lock.json" }}
          paths:
            - /root/project/node_modules
            - /root/project/.next/cache

  build:
    description: 'Build the API docker image and deploy to the registry'
    parameters:
      environment:
        type: string
        default: 'staging'
      tag:
        type: string
        default: 'latest'
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build docker image
          command: |
            docker build --rm=false \
            -t $DOCKER_TAG_PREFIX:<< parameters.tag >> -f Dockerfile .
            docker push $DOCKER_TAG_PREFIX:<< parameters.tag >>
  plan:
    description: 'Runs Terraform plan for Cloud Run'
    parameters:
      tag:
        type: string
        default: 'latest'
      environment:
        type: string
        default: 'staging'
    steps:
      - run:
          name: 'Terraform plan'
          command: |
            mv deployments/.terraformignore.<< parameters.environment>> deployments/cloud/.terraformignore
            terraform -chdir=deployments/cloud init -backend-config=../<< parameters.environment >>.hcl
            echo "commit_hash = \"<< parameters.tag >>\"" >> deployments/cloud/cloudfunctions.auto.tfvars
            terraform -chdir=deployments/cloud plan

  apply:
    description: 'Apply'
    parameters:
      tag:
        type: string
        default: 'latest'
      environment:
        type: string
        default: 'staging'
    steps:
      - run:
          name: 'Terraform apply'
          command: |
            mv deployments/.terraformignore.<< parameters.environment>> deployments/cloud/.terraformignore
            terraform -chdir=deployments/cloud init -backend-config=../<< parameters.environment >>.hcl
            echo "commit_hash = \"<< parameters.tag >>\"" >> deployments/cloud/cloudfunctions.auto.tfvars
            terraform -chdir=deployments/cloud apply --auto-approve

jobs:
  build-lint-test:
    executor: build
    steps:
      - setup
      - configure
      - npm
      - run:
          name: Lint
          command: npm run lint
      - build:
          environment: production
          tag: ${SANATISED_BRANCH_NAME}-${CIRCLE_SHA1}

  terraform-plan:
    executor: terraform
    steps:
      - *fast-checkout
      - configure
      - plan

  terraform-apply:
    executor: terraform
    steps:
      - *fast-checkout
      - configure
      - apply:
          tag: ${SANATISED_BRANCH_NAME}-${CIRCLE_SHA1}

  terraform-plan-production:
    executor: terraform
    steps:
      - *fast-checkout
      - configure:
          environment: production
          gcloud: $GCLOUD_SERVICE_CREDENTIALS_PROD
      - plan:
          tag: ${SANATISED_BRANCH_NAME}-${CIRCLE_SHA1}
          environment: production

  terraform-apply-production:
    executor: terraform
    steps:
      - *fast-checkout
      - configure:
          environment: production
          gcloud: $GCLOUD_SERVICE_CREDENTIALS_PROD
      - apply:
          tag: ${SANATISED_BRANCH_NAME}-${CIRCLE_SHA1}
          environment: production

workflows:
  [project-name]:
    jobs:
      - build-lint-test:
          context:
            - channels
            - shared

      - terraform-plan:
          context:
            - channels
            - shared
          requires:
            - build-lint-test

      - confirm-terraform-apply:
          type: approval
          requires:
            - terraform-plan
          filters:
            branches:
              only:
                - main

      - terraform-apply:
          context:
            - channels
            - shared
          requires:
            - confirm-terraform-apply
          filters:
            branches:
              only:
                - main

      - terraform-plan-production:
          context:
            - channels
            - shared
          requires:
            - terraform-apply
          filters:
            branches:
              only:
                - main

      - confirm-terraform-apply-production:
          type: approval
          requires:
            - terraform-plan-production
          filters:
            branches:
              only:
                - main

      - terraform-apply-production:
          context:
            - channels
            - shared
          requires:
            - confirm-terraform-apply-production
          filters:
            branches:
              only:
                - main
